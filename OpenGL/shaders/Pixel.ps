#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

uniform sampler2D texture_diffuse1;
uniform vec3 lightPos;
uniform vec3 viewPos;

vec4 diffuseLight(vec3 lightColor, vec3 norm, vec3 lightDir) {
    
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    return vec4(diffuse, 1.0f);
}

vec4 ambientLight(vec3 lightColor, float ambientStrength){

    vec3 ambient = ambientStrength * lightColor;

    return vec4(ambient, 1.0f);
}


void main()
{    
    vec4 objectColor = texture(texture_diffuse1, TexCoords);
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    vec3 lightColor = vec3(1.0f, 0.0f, 0.0f);


    float specularStrength = 0.5f;
    
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec4 specular = vec4(specularStrength * spec * lightColor, 1.0f);

    float ambientStrength = 1.0f;

    FragColor = (ambientLight(vec3(1.0f, 1.0f, 1.0f), ambientStrength) + diffuseLight(lightColor, norm, lightDir) + specular) * objectColor;
    
}